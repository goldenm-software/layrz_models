part of '../ble.dart';

@freezed
abstract class BleDevice with _$BleDevice {
  const BleDevice._();

  /// [BleDevice] is the representation of a BLE device.
  const factory BleDevice({
    /// [macAddress] is the MAC address of the BLE device.
    /// Be careful, on Apple ecosystem, the MAC address is not the real identifier, is a generated by the platform
    /// and is hidden from the developer.
    required String macAddress,

    /// [name] is the name of the BLE device.
    /// Can be null if the device does not have a name or is not broadcasted.
    String? name,

    /// [rssi] is the signal strength of the BLE device.
    /// Can be null if the device does not have a signal strength due to a platform limitation.
    int? rssi,

    /// [txPower] is the transmission power of the BLE device.
    /// Can be null if the device does not have a transmission power due to a platform limitation.
    int? txPower,

    /// [manufacturerData] is the manufacturer data of the BLE device.
    @Default([]) List<BleManufacturerData> manufacturerData,

    /// [serviceData] is the service data of the BLE device.
    @Default([]) List<BleServiceData> serviceData,
  }) = _BleDevice;

  factory BleDevice.fromJson(Map<String, dynamic> json) => _$BleDeviceFromJson(json);

  Map<int, List<int>> get serviceDataMap {
    final map = Map<int, List<int>>.from({});
    for (final serviceData in serviceData) {
      map[serviceData.uuid] = serviceData.data ?? <int>[];
    }

    return map;
  }

  Map<int, List<int>> get manufacturerDataMap {
    final map = Map<int, List<int>>.from({});
    for (final manufacturerData in manufacturerData) {
      map[manufacturerData.companyId] = manufacturerData.data ?? <int>[];
    }

    return map;
  }
}
