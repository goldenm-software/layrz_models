part of '../ble.dart';

@freezed
class BleDevice with _$BleDevice {
  const BleDevice._();

  /// [BleDevice] is the representation of a BLE device.
  const factory BleDevice({
    /// [macAddress] is the MAC address of the BLE device.
    /// Be careful, on Apple ecosystem, the MAC address is not the real identifier, is a generated by the platform
    /// and is hidden from the developer.
    required String macAddress,

    /// [name] is the name of the BLE device.
    /// Can be null if the device does not have a name or is not broadcasted.
    String? name,

    /// [rssi] is the signal strength of the BLE device.
    /// Can be null if the device does not have a signal strength due to a platform limitation.
    int? rssi,

    /// [manufacturerData] is the manufacturer data of the BLE device.
    /// Can be null if the device does not have manufacturer data or is not broadcasted.
    List<int>? manufacturerData,

    /// [serviceData] is the service data of the BLE device.
    /// Can be null if the device does not have service data or is not broadcasted.
    /// Also, this list will be ordered by the service UUID.
    List<BleServiceData>? serviceData,
  }) = _BleDevice;

  factory BleDevice.fromJson(Map<String, dynamic> json) => _$BleDeviceFromJson(json);

  Map<String, List<int>> get serviceDataMap {
    final map = <String, List<int>>{};
    for (final serviceData in serviceData ?? <BleServiceData>[]) {
      map[serviceData.uuid] = serviceData.data ?? <int>[];
    }

    return map;
  }
}
